// ===== INITIALISATION MODULE FRANCE V2 =====

function initApp() {
    console.log('🚀 Initialisation Marketeam France Selector V2...');
    
    const requiredModules = [
        { name: 'CONFIG', obj: typeof CONFIG },
        { name: 'GLOBAL_STATE', obj: typeof GLOBAL_STATE },
        { name: 'APP', obj: typeof APP },
        { name: 'initMap', obj: typeof initMap },
        { name: 'loadZonesForCurrentView', obj: typeof loadZonesForCurrentView },
        { name: 'showStatus', obj: typeof showStatus },
        { name: 'createStoreMarker', obj: typeof createStoreMarker }
    ];
    
    for (const module of requiredModules) {
        if (module.obj === 'undefined') {
            console.error(`❌ Module manquant: ${module.name}`);
            return;
        }
    }
    
    console.log('✅ Tous les modules sont chargés');
    
    const map = initMap();
    
    map.on('load', () => {
        console.log('✅ Carte prête');
        
        if (typeof initUIEvents !== 'undefined') {
            initUIEvents();
            console.log('✅ Événements UI initialisés');
        } else {
            console.error('❌ initUIEvents non trouvée');
        }
        
        checkInitialPosition();
        setupKeyboardShortcuts();
    });
}

function checkInitialPosition() {
    // Ne pas afficher de message si on est en mode création (popup adresse)
    if (window.isAddressRequired && window.isAddressRequired()) {
        console.log('Mode création détecté - En attente de validation adresse');
        return;
    }
    
    if (GLOBAL_STATE.storeLocation) {
        console.log('Position initiale détectée:', GLOBAL_STATE.storeLocation);
        showStatus('Position initiale chargée', 'success');
        
        setTimeout(() => {
            loadZonesForCurrentView(true);
        }, 1000);
    } else {
        // Ne pas afficher ce message car la popup adresse va s'ouvrir
        console.log('Pas de position initiale - En attente');
    }
}

function setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
        if (e.target.tagName === 'INPUT' || 
            e.target.tagName === 'TEXTAREA' || 
            e.target.tagName === 'SELECT') {
            return;
        }
        
        switch(e.key.toLowerCase()) {
            case 'delete':
            case 'suppr':
                if (GLOBAL_STATE.selectedZones.size > 0) {
                    clearSelection();
                }
                break;
                
            case 'i':
                if (e.ctrlKey || e.metaKey) {
                    e.preventDefault();
                    openImportPopup();
                }
                break;
                
            case 'escape':
                document.querySelectorAll('.popup.active').forEach(popup => {
                    popup.classList.remove('active');
                });
                break;
				
			case 'a':
                if (e.ctrlKey || e.metaKey) {
                    e.preventDefault();
                    if (window.openAddressPopup) {
                        openAddressPopup();
                    }
                }
                break;

            case 'r':
                if (e.ctrlKey || e.metaKey) {
                    e.preventDefault();
                    if (window.ReinitialiserSelection) {
                        ReinitialiserSelection();
                    }
                }
                break;
        }
    });
}

// MODIFIÉ : Gestion du changement d'adresse avec réinitialisation de session
window.initializeMapFromWebDev = function(lat, lng, address) {
    console.log('=== Initialisation depuis WebDev ===');
    console.log('Adresse:', address);
    console.log('Coordonnées:', { lat, lng });
    
    if (!APP.map || !APP.map.loaded()) {
        console.log('Carte pas encore prête, attente...');
        setTimeout(() => {
            window.initializeMapFromWebDev(lat, lng, address);
        }, 500);
        return;
    }
    
    // NOUVEAU : Vérifier si c'est une nouvelle adresse
    const coordinates = [lng, lat];
    const isNewAddress = !GLOBAL_STATE.storeLocation || 
                        GLOBAL_STATE.storeLocation[0] !== lng || 
                        GLOBAL_STATE.storeLocation[1] !== lat;
    
    if (isNewAddress) {
        console.log('Nouvelle adresse détectée, réinitialisation de la session');
        // Réinitialiser la session et vider les caches
        if (typeof clearCacheForAddressChange !== 'undefined') {
            clearCacheForAddressChange();
        }
    }
    
    GLOBAL_STATE.storeLocation = coordinates;
    GLOBAL_STATE.currentAddress = address; // NOUVEAU : Stocker l'adresse
    GLOBAL_STATE.hasValidatedAddress = true;
    
    createStoreMarker(coordinates, address);
    
    const zoom = calculateSmartZoom(address, coordinates);
    
    APP.map.flyTo({
        center: coordinates,
        zoom: zoom,
        duration: 2000
    });
    
    showStatus(`Adresse localisée : ${address}`, 'success');
    
    setTimeout(() => {
        loadZonesForCurrentView(true);
    }, 2500);
};

window.updateSelectionWebDev = function(nbZones, nbFoyers) {
    console.log('updateSelectionWebDev appelé:', { nbZones, nbFoyers });
};

window.getFranceSelectionData = function() {
    const selectedData = {
        type_zone: GLOBAL_STATE.currentZoneType,
        nb_zones: GLOBAL_STATE.selectedZones.size,
        total_population: GLOBAL_STATE.totalPopulation,
        codes: Array.from(GLOBAL_STATE.selectedZones.keys()),
        zones: Array.from(GLOBAL_STATE.selectedZones.values()),
        session_id: GLOBAL_STATE.sessionId // NOUVEAU : Inclure l'ID de session
    };
    
    console.log('Données de sélection:', selectedData);
    return selectedData;
};

// NOUVEAU : Fonction pour réinitialiser manuellement la session (utile pour debug)
window.forceResetSession = function() {
    console.log('Réinitialisation forcée de la session');
    resetSession();
    clearCacheForAddressChange();
    showStatus('Session réinitialisée', 'warning');
};

// NOUVEAU : Fonction utilitaire pour récupérer les limites de zones
window.getCurrentZoneLimits = function() {
    return CONFIG.ZONE_LIMITS[GLOBAL_STATE.currentZoneType];
};

// NOUVEAU : Fonction pour recentrer sur le point de vente
window.recenterOnStore = function() {
    if (!APP.map || !GLOBAL_STATE.storeLocation) {
        showStatus('Aucun point de vente défini', 'warning');
        return;
    }
    
    // Récupérer le zoom par défaut selon le type de zone actuel
    const defaultZoom = CONFIG.ZONE_LIMITS[GLOBAL_STATE.currentZoneType].DEFAULT_ZOOM_ON_CHANGE;
    
    // Arrondir au pas de 0.25
    const targetZoom = Math.round(defaultZoom * 4) / 4;
    
    console.log(`Recentrage sur point de vente - Zoom: ${targetZoom}`);
    
    APP.map.flyTo({
        center: GLOBAL_STATE.storeLocation,
        zoom: targetZoom,
        duration: 1500
    });
    
    // Après l'animation, vérifier la visibilité des boutons
    setTimeout(() => {
        if (window.updateRecenterButtonsVisibility) {
            window.updateRecenterButtonsVisibility();
        }
    }, 1600);
};

// MODIFIÉ : Fonction pour recentrer sur la sélection avec transition fluide unique
window.recenterOnSelection = function() {
    if (!APP.map || GLOBAL_STATE.selectedZones.size === 0) {
        showStatus('Aucune zone sélectionnée', 'warning');
        return;
    }
    
    let minLat = Infinity, maxLat = -Infinity;
    let minLng = Infinity, maxLng = -Infinity;
    
    // Calculer les limites de toutes les zones sélectionnées
    GLOBAL_STATE.selectedZones.forEach((zoneData, code) => {
        const zone = GLOBAL_STATE.zonesCache.get(code);
        if (zone && zone.geometry) {
            try {
                const bbox = turf.bbox(zone.geometry);
                minLng = Math.min(minLng, bbox[0]);
                minLat = Math.min(minLat, bbox[1]);
                maxLng = Math.max(maxLng, bbox[2]);
                maxLat = Math.max(maxLat, bbox[3]);
            } catch (e) {
                console.error('Erreur calcul bbox:', e);
            }
        }
    });
    
    if (minLat !== Infinity) {
        const bounds = [[minLng, minLat], [maxLng, maxLat]];
        
        // NOUVEAU : Calculer le zoom optimal avec la méthode cameraForBounds
        const camera = APP.map.cameraForBounds(bounds, {
            padding: {
                top: 100,
                bottom: 100,
                left: 100,
                right: 100  // Padding uniforme car boutons à droite
            }
        });
        
        if (camera) {
            // Calculer le zoom avec recul
			let targetZoom = camera.zoom - 0.5;

			// Arrondir au 0.25 le plus proche
			targetZoom = Math.round(targetZoom * 4) / 4;
            
            // S'assurer qu'on ne descend pas trop bas
            const minZoomForType = getCurrentZoneLimits().MIN_ZOOM_DISPLAY;
            targetZoom = Math.max(targetZoom, minZoomForType);
            
            console.log(`Recentrage sur sélection - Zoom calculé: ${camera.zoom.toFixed(2)} → Avec recul: ${targetZoom}`);
            
            // Une seule animation fluide avec le zoom final
            APP.map.flyTo({
                center: camera.center,
                zoom: targetZoom,
                duration: 1500
            });
            
            // Après l'animation complète, vérifier la visibilité des boutons
            setTimeout(() => {
                if (window.updateRecenterButtonsVisibility) {
                    window.updateRecenterButtonsVisibility();
                }
            }, 1600);
        }
    }
};

// NOUVEAU : Fonction pour mettre à jour la visibilité du bouton de recentrage sélection
window.updateRecenterButtonVisibility = function() {
    const btn = document.getElementById('recenter-selection-btn');
    if (btn) {
        if (GLOBAL_STATE.selectedZones.size > 0) {
            btn.classList.remove('hidden');
        } else {
            btn.classList.add('hidden');
        }
    }
};

document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM chargé, lancement de l\'application...');
    
    const spinner = document.getElementById('loading-spinner');
    if (spinner) {
        spinner.style.display = 'none';
    }
    
    initApp();
});

console.log('✅ Module MAIN-FRANCE V2 chargé');