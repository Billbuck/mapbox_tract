Procédure serveur au chargement de la page webdev :


procédure MaPage()
// TON_TOKEN_MAPBOX : pk.eyJ1IjoibWljaGVsLWF0dGFsaSIsImEiOiJjbWF4eTJnMWQwMzZ3MmpyMDB3b2h0NG1vIn0.EOP-_T7vR2peVDLkrqS1bQ

sTexte est une chaîne    = UTF8VersChaîne(fChargeTexte(fRepWeb() + "/Tract V2/tract-v2.html"))
htmlCarte = sTexte.Remplace("RepWeb", RépertoireWeb,MotComplet)
// Définir l'adresse du point de vente (exemple)
sAdressePointVente    est une chaîne    <synchronisé navigateur>
rLatitude            est un réel        <synchronisé navigateur>
rLongitude            est un réel        <synchronisé navigateur>
sAdressePointVente    = "1 Rue Bleue, 75009 Paris, France"
rLatitude            = 48.87574
rLongitude            = 2.34799
sAdressePointVente     = "5 rue des Bruyères, 93260 Les Lilas, France"
rLatitude            = 48.878646
rLongitude            = 2.413234
libAdresse             = sAdressePointVente


Procédures navigateur au chargement de la page :
// Initialiser la communication
CommunicationCarteWebDev(libZone.Alias, libFoyer.Alias, libAdresse.Alias)
// Code navigateur de la page (événement onload ou après affichage)
InitialiserCarte(rLatitude, rLongitude, sAdressePointVente)

Ci joint le code des procédures Javascript

function CommunicationCarteWebDev(aliasLibZones, aliasLibNbFoyers, aliasLibAdresse) {
    console.log("Initialisation communication avec WebDev");
    console.log("Alias zones:", aliasLibZones);
    console.log("Alias foyers:", aliasLibNbFoyers);
    console.log("Alias adresse:", aliasLibAdresse);

    // WebDev génère des IDs avec le préfixe "tz" pour les libellés
    var idZones = "tz" + aliasLibZones;
    var idFoyers = "tz" + aliasLibNbFoyers;
    var idAdresse = "tz" + aliasLibAdresse;

    // Fonction pour mettre à jour un libellé WebDev sans toucher aux styles
    function updateWebDevLabel(elementId, text) {
        var element = document.getElementById(elementId);
        if (!element) return false;

        // WebDev utilise une structure table > tbody > tr > td pour les libellés
        // Chercher le TD qui contient le texte
        var tdElement = element.querySelector('td');

        if (tdElement) {
            // Mettre à jour uniquement le contenu texte du TD
            tdElement.textContent = text.trim();
        } else {
            // Fallback si pas de table (au cas où)
            element.textContent = text.trim();
        }

        return true;
    }

    // Fonction pour mettre à jour les libellés WebDev
    window.updateSelectionWebDev = function(nbZones, nbFoyers) {
        console.log("Mise à jour sélection:", nbZones, "zones,", nbFoyers, "foyers");

        // Créer les textes avec gestion du singulier/pluriel
        var textZones;
        if (nbZones === 0) {
            textZones = '0 zone sélectionnée';
        } else if (nbZones === 1) {
            textZones = '1 zone sélectionnée';
        } else {
            textZones = nbZones + ' zones sélectionnées';
        }

        var textFoyers;
        if (nbFoyers === 0) {
            textFoyers = '0 foyer';
        } else if (nbFoyers === 1) {
            textFoyers = '1 foyer';
        } else {
            textFoyers = nbFoyers.toLocaleString('fr-FR') + ' foyers';
        }

        // Mettre à jour les libellés
        if (updateWebDevLabel(idZones, textZones)) {
            console.log("✓ Zones mises à jour:", textZones);
        } else {
            console.error("✗ Libellé zones non trouvé avec ID:", idZones);
        }

        if (updateWebDevLabel(idFoyers, textFoyers)) {
            console.log("✓ Foyers mis à jour:", textFoyers);
        } else {
            console.error("✗ Libellé foyers non trouvé avec ID:", idFoyers);
        }
    };

    // NOUVELLE FONCTION : Mettre à jour l'adresse
    window.updateWebDevAddress = function(nouvelleAdresse) {
        console.log("Mise à jour adresse:", nouvelleAdresse);

        if (updateWebDevLabel(idAdresse, nouvelleAdresse)) {
            console.log("✓ Adresse mise à jour:", nouvelleAdresse);
        } else {
            console.error("✗ Libellé adresse non trouvé avec ID:", idAdresse);
        }
    };

    // Fonction pour récupérer l'adresse depuis WebDev
    window.getStoreAddressFromWebDev = function() {
        var element = document.getElementById(idAdresse);

        if (element) {
            // Chercher dans le TD si structure table
            var tdElement = element.querySelector('td');
            var adresse = '';

            if (tdElement) {
                adresse = (tdElement.textContent || '').trim();
            } else {
                adresse = (element.textContent || '').trim();
            }

            console.log("Adresse récupérée:", adresse);
            return adresse;
        }

        console.error("✗ Libellé adresse non trouvé avec ID:", idAdresse);
        return '';
    };

    // Test initial
    setTimeout(function() {
        console.log("=== Test initial ===");

        // Vérifier la structure une fois pour debug
        var elementTest = document.getElementById(idZones);
        if (elementTest) {
            var tdTest = elementTest.querySelector('td');
            if (tdTest) {
                console.log("Structure confirmée: DIV > TABLE > ... > TD");
                console.log("Contenu TD actuel:", tdTest.textContent);
            }
        }

        // Initialiser à 0
        window.updateSelectionWebDev(0, 0);

        console.log("=== Communication WebDev prête ===");
    }, 500);
}

function InitialiserCarte(lat, lng, adresse) {
    // Attendre que la carte soit chargée
    setTimeout(function() {
        // Définir la position du magasin
        GLOBAL_STATE.storeLocation = [lng, lat];
        // Créer le marqueur
        createStoreMarker(GLOBAL_STATE.storeLocation, adresse);
        // Centrer la carte
        APP.map.flyTo({
            center: GLOBAL_STATE.storeLocation,
            zoom: 14
        });
        // Charger les zones
        setTimeout(function() {
            loadZonesForCurrentView(true);
        }, 500);
    }, 1000);
}